{
  "swagger": "2.0",
  "info": {
    "description": "onboarding-weather-service description",
    "version": "1.0",
    "title": "onboarding-weather-service"
  },
  "basePath": "/",
  "tags": [],
  "schemes": ["http"],
  "paths": {
    "/.internal/v1/api-definition/openapi3": {
      "get": {
        "summary": "Returns the Open API documentation",
        "parameters": [
          {
            "type": "string",
            "name": "x-jmespath",
            "required": true,
            "in": "header",
            "description": "JMESPath format query that will be applied to response"
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "500": { "description": "Internal Server Error" }
        },
        "tags": ["API Definition"],
        "produces": ["application/json"],
        "consumes": ["application/json"]
      }
    },
    "/.internal/v1/health/self": {
      "get": {
        "summary": "Check if HTTP Webserver is running",
        "responses": {
          "204": { "description": "Success" },
          "500": { "description": "Internal Server Error" },
          "501": { "description": "Not Implemented" }
        },
        "tags": ["Health"],
        "produces": ["application/json"],
        "consumes": ["application/json"]
      }
    },
    "/.internal/v1/health/upstreams": {
      "get": {
        "summary": "Check if HTTP Webserver is running and, when possible, database (and other TCP tunnels) are in a good state",
        "responses": {
          "200": { "description": "Success" },
          "500": { "description": "Internal Server Error" },
          "501": { "description": "Not Implemented" }
        },
        "tags": ["Health"],
        "produces": ["application/json"],
        "consumes": ["application/json"]
      }
    },
    "/.internal/v1/state/user/{usid}": {
      "get": {
        "summary": "Generate Subject Access Request Data",
        "parameters": [
          { "type": "string", "name": "usid", "required": true, "in": "path" }
        ],
        "responses": {
          "200": { "description": "User Found" },
          "404": { "description": "User Not Found" },
          "500": { "description": "Internal Server Error" },
          "501": { "description": "Not Implemented" }
        },
        "tags": ["State"],
        "produces": ["application/json"],
        "consumes": ["application/json"]
      },
      "delete": {
        "summary": "Remove any personal data, for a USID, that was generated by the service",
        "parameters": [
          { "type": "string", "name": "usid", "required": true, "in": "path" }
        ],
        "responses": {
          "204": { "description": "User Data Deleted" },
          "404": { "description": "User Not Found" },
          "500": { "description": "Internal Server Error" },
          "501": { "description": "Not Implemented" }
        },
        "tags": ["State"],
        "produces": ["application/json"],
        "consumes": ["application/json"]
      }
    },
    "/api/v1/weather": {
      "get": {
        "summary": "Return weather for a given city",
        "parameters": [
          {
            "type": "string",
            "name": "city",
            "required": true,
            "in": "query",
            "description": "Name of the city to fetch weather for"
          },
          {
            "name": "x-cluster-use-mock",
            "required": false,
            "in": "header",
            "description": "Indicates if the service should return mock data",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { "$ref": "#/definitions/WeatherModel" }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Error" }
        },
        "tags": ["Weather"],
        "produces": ["application/json"],
        "consumes": ["application/json"]
      }
    }
  },
  "definitions": {
    "WeatherModel": {
      "type": "object",
      "properties": {
        "formattedCondition": { "type": "string", "example": "Clear" },
        "minTemp": { "type": "number", "example": "-2.695" },
        "maxTemp": { "type": "number", "example": "8.51" },
        "locationId": { "type": "number", "example": "6113752992710656" },
        "created": {
          "type": "string",
          "example": "2018-11-29T18:02:35.815Z",
          "description": "Date in ISO-8601 format"
        },
        "lastUpdated": {
          "type": "string",
          "example": "2018-11-29T18:02:35.815Z",
          "description": "Date in ISO-8601 format"
        },
        "location": { "type": "string", "example": "Chicago" }
      },
      "required": [
        "formattedCondition",
        "minTemp",
        "maxTemp",
        "locationId",
        "created",
        "lastUpdated",
        "location"
      ]
    }
  }
}
